png(filename = "pathwayScatterplot3.png", width = 600, height = 600)
pathwayScatterplot(SeuratObj, by = "GO", pathwayID = "GO:003021127", pointsize = 0.5, label = F)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
png(filename = "pathwayScatterplot3.png", width = 600, height = 600)
pathwayScatterplot(SeuratObj, by = "GO", pathwayID = "GO:003021127", pointsize = 0.5, label = F)
dev.off()
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
png(filename = "pathwayScatterplot3.png", width = 600, height = 600)
pathwayScatterplot(SeuratObj, by = "GO", pathwayID = "GO:003021127", pointsize = 0.5, label = F)
dev.off()
png(filename = "pathwayScatterplot.png", width = 600, height = 600)
pathwayScatterplot(SeuratObj, by = "GO", pathwayID = "GO:0030217", pointsize = 0.5, label = F)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
png(filename = "pathwayScatterplot.png", width = 600, height = 600)
pathwayScatterplot(SeuratObj, by = "GO", pathwayID = "GO:0030217", pointsize = 0.5, label = F)
dev.off()
png(filename = "embeddedplot_pie.png", width = 600, height = 600)
embeddedplot(SeuratObj, type = "pie")
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
png(filename = "embeddedplot_pie.png", width = 600, height = 600)
embeddedplot(SeuratObj, type = "pie")
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
roxygenize('F:/CellFunMap')
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
png(filename = "embeddedplot_pie.png", width = 600, height = 600)
embeddedplot(SeuratObj, type = "pie")
dev.off()
png(filename = "embeddedplot_hist.png", width = 600, height = 600)
embeddedplot(SeuratObj, topaths = 1, reduction = "umap", type = "hist")
dev.off()
pdf(file = "emapplotPie.pdf", width = 13, height = 10)
emapplotPie(SeuratObj, node_size_cex = 1.5, showCategory = 3)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
roxygenize('F:/CellFunMap')
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "emapplotPie.pdf", width = 13, height = 10)
emapplotPie(SeuratObj, node_size_cex = 1.5, showCategory = 3)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
roxygenize('F:/CellFunMap')
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "emapplotPie.pdf", width = 13, height = 10)
emapplotPie(SeuratObj, node_size_cex = 1.5, showCategory = 3)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
roxygenize('F:/CellFunMap')
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "emapplotPie.pdf", width = 13, height = 10)
emapplotPie(SeuratObj, node_size_cex = 1.5, showCategory = 3)
dev.off()
?cosine_network_term
pdf(file = "emapplot2.pdf", width = 13, height = 10)
emapplot2(SeuratObj, cluster = unique(SeuratObj@misc$GSEAresult_GO$cluster)[2])
dev.off()
unique(SeuratObj@misc$GSEAresult_GO$cluster)[2]
pdf(file = "goplot2.pdf", width = 13, height = 10)
goplot2(SeuratObj, cluster = unique(SeuratObj@misc$GSEAresult_GO$cluster)[2])
dev.off()
enrichplot::goplot
# 测试代码，修修补补
setwd("F:/CellFunMap")
roxygenize('F:/CellFunMap')
devtools::load_all()
pdf(file = "goplot2.pdf", width = 13, height = 10)
goplot2(SeuratObj, cluster = unique(SeuratObj@misc$GSEAresult_GO$cluster)[2])
dev.off()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "goplot2.pdf", width = 13, height = 10)
goplot2(SeuratObj, cluster = unique(SeuratObj@misc$GSEAresult_GO$cluster)[2])
dev.off()
pdf(file = "cosine_network_term_GSEA.pdf", width = 13, height = 10)
cosine_network_term(SeuratObj, cosine_cal_by = "GSEA result", GSEA_by = "GO",
topn = 10, layout = "fr", cos_sim_thresh = 0.8, radius = 0.1, text_size = 2)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "cosine_network_term_GSEA.pdf", width = 13, height = 10)
cosine_network_term(SeuratObj, cosine_cal_by = "GSEA result", GSEA_by = "GO",
topn = 10, layout = "fr", cos_sim_thresh = 0.8, radius = 0.1, text_size = 2)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "cosine_network_term_GSEA.pdf", width = 13, height = 10)
cosine_network_term(SeuratObj, cosine_cal_by = "GSEA result", GSEA_by = "GO",
topn = 10, layout = "fr", cos_sim_thresh = 0.8, radius = 0.1, text_size = 2)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "cosine_network_term_GSEA.pdf", width = 13, height = 10)
cosine_network_term(SeuratObj, cosine_cal_by = "GSEA result", GSEA_by = "GO",
topn = 10, layout = "fr", cos_sim_thresh = 0.9, radius = 0.1, text_size = 2)
dev.off()
pdf(file = "Cosine_networkByGSEA.pdf", width = 10, height = 10)
Cosine_networkByGSEA(SeuratObj, layout=layout_with_fr, cos_sim_thresh=0.8, SEED=123,
node.cex=6, width_range=c(0.8, 4), vertex.label.dist=0.5)
Cosine_networkByGSEA(SeuratObj, layout=layout_nicely, cos_sim_thresh=0.77, SEED=123,
node.cex=6, width_range=c(1, 4), vertex.label.dist=0.5)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
roxygenize('F:/CellFunMap')
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
dev.off()
pdf(file = "Cosine_networkByGSEA.pdf", width = 10, height = 10)
Cosine_networkByGSEA(SeuratObj, layout=layout_with_fr, cos_sim_thresh=0.8, SEED=123,
node.cex=6, width_range=c(0.8, 4), vertex.label.dist=0.5)
# 测试代码，修修补补
setwd("F:/CellFunMap")
roxygenize('F:/CellFunMap')
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
dev.off()
pdf(file = "Cosine_networkByGSEA.pdf", width = 10, height = 10)
Cosine_networkByGSEA(SeuratObj, layout=layout_with_fr, cos_sim_thresh=0.8, SEED=123,
node.cex=6, width_range=c(0.8, 4), vertex.label.dist=0.5)
Cosine_networkByGSEA(SeuratObj, layout=layout_nicely, cos_sim_thresh=0.77, SEED=123,
node.cex=6, width_range=c(1, 4), vertex.label.dist=0.5)
dev.off()
min(SeuratObj@misc$GSEAresult_GO$p.adjust)
# 测试代码，修修补补
setwd("F:/CellFunMap")
roxygenize('F:/CellFunMap')
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "Cosine_networkByGSEA.pdf", width = 10, height = 10)
Cosine_networkByGSEA(SeuratObj, layout=layout_with_fr, cos_sim_thresh=0.8, p.adjust_thresh=0.05, SEED=123,
node.cex=6, width_range=c(0.8, 4), vertex.label.dist=0.5)
Cosine_networkByGSEA(SeuratObj, layout=layout_nicely, cos_sim_thresh=0.77, p.adjust_thresh=0.05, SEED=123,
node.cex=6, width_range=c(1, 4), vertex.label.dist=0.5)
dev.off()
pdf(file = "Cosine_networkByGSEA.pdf", width = 10, height = 10)
Cosine_networkByGSEA(SeuratObj, layout=layout_with_fr, cos_sim_thresh=0.8, p.adjust_thresh=0.05, SEED=123,
node.cex=6, width_range=c(0.8, 4), vertex.label.dist=0.5)
Cosine_networkByGSEA(SeuratObj, layout=layout_nicely, cos_sim_thresh=0.77, p.adjust_thresh=0.05, SEED=123,
node.cex=6, width_range=c(1, 4), vertex.label.dist=0.5)
dev.off()
dev.off()
1<5
1<=5
1=<
1=<5
1>=5
1=>5
cos_sim_thresh=0.8
p.adjust_thresh=0.05
SEED=123
node.cex=6
width_range=c(0.8, 4)
vertex.label.dist=0.5
layout=layout_with_fr
by = "GO"
GSEAresult <- slot(object = SeuratObj, name = 'misc')[[paste0("GSEAresult_", by)]]
GSEAresult %<>% dplyr::mutate(logFDR=-log2(p.adjust)) # -log2 instead of -log10 to enlarge the difference
topath <- GSEAresult %>% dplyr::filter(p.adjust <= p.adjust_thresh) %>% dplyr::distinct(ID) %>% dplyr::pull(ID) # only use part of pathways to calculate cosine similarity
dd <- GSEAresult %>% dplyr::filter(ID %in% topath) %>% dplyr::select(cluster, ID, logFDR)
ccc <- dd %>% widyr::pairwise_similarity(item = cluster, feature = ID, value = logFDR, upper=F)
View(ccc)
links <- ccc %>% dplyr::filter(similarity >= cos_sim_thresh) %>% magrittr::set_colnames(c('source', 'target', 'weight')) %>%
dplyr::mutate(width=weight)
width_range=c(0.8, 4)
links$width <- scales::rescale(links$width, width_range)
nodes <- data.frame(name=unique(c(links$source, links$target)), stringsAsFactors = F)
View(nodes)
unique(c(links$source, links$target))
nodes
nodes$color <- scPalette(nrow(nodes))
gg <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
unique(c(links$source, links$target))
dd$cluster <- as.character(dd$cluster)
ccc <- dd %>% widyr::pairwise_similarity(item = cluster, feature = ID, value = logFDR, upper=F)
links <- ccc %>% dplyr::filter(similarity >= cos_sim_thresh) %>% magrittr::set_colnames(c('source', 'target', 'weight')) %>%
dplyr::mutate(width=weight)
links$width <- scales::rescale(links$width, width_range)
nodes <- data.frame(name=unique(c(links$source, links$target)), stringsAsFactors = F)
nodes$color <- scPalette(nrow(nodes))
gg <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
gc()
load("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码/SeuratObj.RData")
# 测试代码，修修补补
setwd("F:/CellFunMap")
roxygenize('F:/CellFunMap')
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "Cosine_networkByGSEA.pdf", width = 10, height = 10)
Cosine_networkByGSEA(SeuratObj, layout=layout_with_fr, cos_sim_thresh=0.8, p.adjust_thresh=0.05, SEED=123,
node.cex=6, width_range=c(0.8, 4), vertex.label.dist=0.5)
dev.off()
pdf(file = "cosine_network_term_GSEA.pdf", width = 13, height = 10)
cosine_network_term(SeuratObj, cosine_cal_by = "GSEA result", pie_by = "GSEA result", GSEA_by = "GO",
topn = 10, layout = "fr", cos_sim_thresh = 0.9, radius = 0.1, text_size = 2)
dev.off()
clustercorplot(SeuratObj, by = "GO", link_threshold=0.3, vertex.label.cex=1, weight.scale=T)
rm(GO2level)
gc()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
clustercorplot(SeuratObj, by = "GO", link_threshold=0.3, vertex.label.cex=1, weight.scale=T)
pdf(file = "edge_bundling_GSEA.pdf", width = 10, height = 10)
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by='seurat_clusters')
edge_bundling_GSEA(SeuratObj, link_threshold=0.62, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by='seurat_clusters')
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "edge_bundling_GSEA.pdf", width = 10, height = 10)
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by='seurat_clusters')
edge_bundling_GSEA(SeuratObj, link_threshold=0.62, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by='seurat_clusters')
dev.off()
by = "GO"
GSEAresult <- slot(object = SeuratObj, name = 'misc')[[paste0("GSEAresult_", by)]]
GSEAresult %<>% dplyr::mutate(logFDR=-log10(p.adjust))
topath <- GSEAresult %>% dplyr::filter(p.adjust < 0.01) %>% dplyr::distinct(ID) %>% dplyr::pull(ID)  # only use part of pathways to calculate
str(SeuratObj@meta.data)
p.adjust_thresh=0.05
topath <- GSEAresult %>% dplyr::filter(p.adjust < p.adjust_thresh) %>% dplyr::distinct(ID) %>% dplyr::pull(ID)  # only use part of pathways to calculate
load("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码/SeuratObj.RData")
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
dev.off()
pdf(file = "edge_bundling_GSEA.pdf", width = 10, height = 10)
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by='seurat_clusters')
edge_bundling_GSEA(SeuratObj, link_threshold=0.62, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by='seurat_clusters')
dev.off()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "GOboxplot.pdf", width = 9, height = 9)
GOboxplot(SeuratObj, goid = "GO:0030217", type = "child")
dev.off()
pdf(file = "GOcircleplot.pdf", width = 9, height = 9)
GOcircleplot(SeuratObj, by = "GO", Orgdb=org.Hs.eg.db, genes=NULL)
dev.off()
pdf(file = "GOcircleplot.pdf", width = 9, height = 9)
GOcircleplot(SeuratObj, Orgdb=org.Hs.eg.db, genes=NULL)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "GOcircleplot.pdf", width = 9, height = 9)
GOcircleplot(SeuratObj, Orgdb=org.Hs.eg.db, genes=NULL)
dev.off()
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
pdf(file = "GOcircleplot.pdf", width = 9, height = 9)
GOcircleplot(SeuratObj, genes=NULL)
dev.off()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
pdf(file = "GOcircleplot.pdf", width = 9, height = 9)
GOcircleplot(SeuratObj, genes=NULL)
dev.off()
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by='seurat_clusters')
link_threshold=0.75
p.adjust_thresh=0.05
link_width=0.9
method='cosine similarity'
node.by='seurat_clusters'
group.by='seurat_clusters'
by = "GO"
GSEAresult <- slot(object = SeuratObj, name = 'misc')[[paste0("GSEAresult_", by)]]
majorCellType <- unique(SeuratObj@meta.data[, c(group.by, node.by)]) %>% dplyr::arrange(get(group.by))
View(majorCellType)
## define data.frame with hierarchical information
d1 <- data.frame(from="origin", to=unique(majorCellType[, 1]), stringsAsFactors = F)
d2 <- majorCellType %>% magrittr::set_colnames(c('from', 'to'))
hierarchy <- rbind(d1, d2)
vertices <- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))), stringsAsFactors = F)
vertices$group <- hierarchy$from[match(vertices$name, hierarchy$to)]
nn <- dplyr::count(SeuratObj@meta.data, get(node.by)) %>% magrittr::set_colnames(c('cluster', 'n'))
vertices$cellnumber <- nn$n[match(vertices$name, nn$cluster)]
vertices$id <- NA
myleaves <- which(is.na(match(vertices$name, hierarchy$from))) # only focus on leaves
nleaves <- length(myleaves)
vertices$id[myleaves] <- seq(1:nleaves)
vertices$angle <- 120 - 360 * vertices$id/nleaves
vertices$hjust <- ifelse(vertices$angle < -90 | vertices$angle > 90, 0, 1)
vertices$angle <- ifelse(vertices$angle < -90 | vertices$angle > 90, vertices$angle+180, vertices$angle) # flip angle BY to make them readable
GSEAresult %<>% dplyr::mutate(logFDR=-log10(p.adjust))
topath <- GSEAresult %>% dplyr::filter(p.adjust < p.adjust_thresh) %>% dplyr::distinct(ID) %>% dplyr::pull(ID)  # only use part of pathways to calculate
dd <- GSEAresult %>% dplyr::filter(ID %in% topath) %>% dplyr::select(cluster, ID, logFDR)
ccc <- dd %>% widyr::pairwise_similarity(item = cluster, feature = ID, value = logFDR, upper=F)
View(ccc)
colnames(ccc)[3] <- 'links'
connect <- ccc %>% dplyr::filter(links >= link_threshold)
from <- match(connect$item1, vertices$name)
to <- match(connect$item2, vertices$name)
mygraph <- graph_from_data_frame(hierarchy, vertices=vertices)
View(vertices)
vertices$name
hierarchy$from
match(vertices$name, hierarchy$from)
View(vertices)
hierarchy$to
match(vertices$name, hierarchy$to)
vertices$name
hierarchy$from
hierarchy$from[match(vertices$name, hierarchy$to)]
View(hierarchy)
match(vertices$name, hierarchy$to)
match(as.character(vertices$name), hierarchy$to)
match(as.character(vertices$name), as.character(hierarchy$to))
hierarchy$from[match(as.character(vertices$name), as.character(hierarchy$to))]
as.character(hierarchy$from)[match(as.character(vertices$name), as.character(hierarchy$to))]
View(hierarchy)
View(vertices)
from <- match(connect$item1, vertices$name)
to <- match(connect$item2, vertices$name)
mygraph <- graph_from_data_frame(hierarchy, vertices=vertices)
pp <- ggraph(mygraph, layout = 'dendrogram', circular = TRUE)
df4 <- get_con(from = from, to = to)(pp$data)
bb <- plyr::ddply(df4, .(con.id), .fun = function(df){
df$links <- connect$links[connect$item1 == df$name[1] & connect$item2 == df$name[nrow(df)]]
df
})
pp <- ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = bb, alpha=1, width=link_width, aes(colour=links)) +
scale_edge_color_distiller(palette = "RdPu", direction = 1) + # BuPu
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=3, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, colour=group, size=cellnumber), alpha=1) +
scale_colour_manual(values= scPalette2(length(unique(majorCellType[, 1]))), guide=guide_legend(override.aes = list(size=5))) +
scale_size_continuous(range = c(2,15)) +
coord_fixed() +
theme_void() +
theme(plot.margin=unit(c(0,0,0,0),"cm")) +
expand_limits(x = c(-1.6, 1.6), y = c(-1.6, 1.6))
pp
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by='seurat_clusters')
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by=NULL)
View(hierarchy)
unique(SeuratObj$seurat_annotations)
length(unique(unique(SeuratObj$seurat_annotations)))
length(unique(unique(SeuratObj$RNA_snn_res.0.5)))
SeuratObj$group <- 'origin'
SeuratObj$group <- 'majorcelltype'
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
majorCellType <- unique(SeuratObj@meta.data[, c(group.by, node.by)]) %>% dplyr::arrange(get(group.by))
## define data.frame with hierarchical information
d1 <- data.frame(from="origin", to=unique(majorCellType[, 1]), stringsAsFactors = F)
d2 <- majorCellType %>% magrittr::set_colnames(c('from', 'to'))
hierarchy <- rbind(d1, d2)
vertices <- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))), stringsAsFactors = F)
vertices$group <- hierarchy$from[match(vertices$name, hierarchy$to)]
nn <- dplyr::count(SeuratObj@meta.data, get(node.by)) %>% magrittr::set_colnames(c('cluster', 'n'))
vertices$cellnumber <- nn$n[match(vertices$name, nn$cluster)] # cell number of each cluster as node size
# calculate angle of leaves' labels
vertices$id <- NA
myleaves <- which(is.na(match(vertices$name, hierarchy$from))) # only focus on leaves
nleaves <- length(myleaves)
vertices$id[myleaves] <- seq(1:nleaves)
vertices$angle <- 120 - 360 * vertices$id/nleaves
vertices$hjust <- ifelse(vertices$angle < -90 | vertices$angle > 90, 0, 1)
vertices$angle <- ifelse(vertices$angle < -90 | vertices$angle > 90, vertices$angle+180, vertices$angle) # flip angle BY to make them readable
GSEAresult %<>% dplyr::mutate(logFDR=-log10(p.adjust))
View(hierarchy)
node.by
group.by="group"
majorCellType <- unique(SeuratObj@meta.data[, c(group.by, node.by)]) %>% dplyr::arrange(get(group.by))
## define data.frame with hierarchical information
d1 <- data.frame(from="origin", to=unique(majorCellType[, 1]), stringsAsFactors = F)
d2 <- majorCellType %>% magrittr::set_colnames(c('from', 'to'))
hierarchy <- rbind(d1, d2)
## node information, cell type as group, cell number of each cluster as node size
vertices <- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))), stringsAsFactors = F)
vertices$group <- hierarchy$from[match(vertices$name, hierarchy$to)]
nn <- dplyr::count(SeuratObj@meta.data, get(node.by)) %>% magrittr::set_colnames(c('cluster', 'n'))
vertices$cellnumber <- nn$n[match(vertices$name, nn$cluster)] # cell number of each cluster as node size
# calculate angle of leaves' labels
vertices$id <- NA
myleaves <- which(is.na(match(vertices$name, hierarchy$from))) # only focus on leaves
nleaves <- length(myleaves)
vertices$id[myleaves] <- seq(1:nleaves)
vertices$angle <- 120 - 360 * vertices$id/nleaves
vertices$hjust <- ifelse(vertices$angle < -90 | vertices$angle > 90, 0, 1)
vertices$angle <- ifelse(vertices$angle < -90 | vertices$angle > 90, vertices$angle+180, vertices$angle)
View(hierarchy)
View(vertices)
load("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码/SeuratObj.RData")
gc()
pdf(file = "edge_bundling_GSEA.pdf", width = 10, height = 10)
SeuratObj$group <- 'majorcelltype'
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by="group")
dev.off()
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by="group")
link_threshold=0.75
p.adjust_thresh=0.05
link_width=0.9
method='pearson'
node.by='seurat_clusters'
group.by="group"
unique(SeuratObj$group)
by = "GO"
GSEAresult <- slot(object = SeuratObj, name = 'misc')[[paste0("GSEAresult_", by)]]
majorCellType <- unique(SeuratObj@meta.data[, c(group.by, node.by)]) %>% dplyr::arrange(get(group.by))
## define data.frame with hierarchical information
d1 <- data.frame(from="origin", to=unique(majorCellType[, 1]), stringsAsFactors = F)
d2 <- majorCellType %>% magrittr::set_colnames(c('from', 'to'))
hierarchy <- rbind(d1, d2)
## node information, cell type as group, cell number of each cluster as node size
vertices <- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))), stringsAsFactors = F)
vertices$group <- hierarchy$from[match(vertices$name, hierarchy$to)]
nn <- dplyr::count(SeuratObj@meta.data, get(node.by)) %>% magrittr::set_colnames(c('cluster', 'n'))
vertices$cellnumber <- nn$n[match(vertices$name, nn$cluster)] # cell number of each cluster as node size
# calculate angle of leaves' labels
vertices$id <- NA
myleaves <- which(is.na(match(vertices$name, hierarchy$from))) # only focus on leaves
nleaves <- length(myleaves)
vertices$id[myleaves] <- seq(1:nleaves)
vertices$angle <- 120 - 360 * vertices$id/nleaves
vertices$hjust <- ifelse(vertices$angle < -90 | vertices$angle > 90, 0, 1)
vertices$angle <- ifelse(vertices$angle < -90 | vertices$angle > 90, vertices$angle+180, vertices$angle) # flip angle BY to make them readable
GSEAresult %<>% dplyr::mutate(logFDR=-log10(p.adjust))
topath <- GSEAresult %>% dplyr::filter(p.adjust < p.adjust_thresh) %>% dplyr::distinct(ID) %>% dplyr::pull(ID)  # only use part of pathways to calculate
dd <- GSEAresult %>% dplyr::filter(ID %in% topath) %>% dplyr::select(cluster, ID, logFDR)
if (method == 'cosine similarity') {
ccc <- dd %>% widyr::pairwise_similarity(item = cluster, feature = ID, value = logFDR, upper=F)
} else if (method == 'pearson') {
ccc <- dd %>% widyr::pairwise_cor(item = cluster, feature = ID, value = logFDR, method ="pearson", upper=F)
} else if (method == 'spearman') {
ccc <- dd %>% widyr::pairwise_cor(item = cluster, feature = ID, value = logFDR, method ="spearman", upper=F)
}
colnames(ccc)[3] <- 'links'
connect <- ccc %>% dplyr::filter(links >= link_threshold)
View(vertices)
View(hierarchy)
View(ccc)
edge_bundling_GSEA(SeuratObj, link_threshold=0.75, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.6, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.6, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.5, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.4, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.65, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.7, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.4, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by="group")
gc()
# 测试代码，修修补补
setwd("F:/CellFunMap")
roxygenize('F:/CellFunMap')
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
load("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码/SeuratObj.RData")
pdf(file = "edge_bundling_GSEA.pdf", width = 10, height = 10)
SeuratObj$group <- 'majorcelltype' # 原始数据不分大类小类，因此自己分配大类
edge_bundling_GSEA(SeuratObj, link_threshold=0.7, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.4, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by="group")
dev.off()
edge_bundling_GSEA(SeuratObj, link_threshold=0.8, p.adjust_thresh=0.05, link_width=0.9, method='pearson', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.8, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.9, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.98, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
# 测试代码，修修补补
setwd("F:/CellFunMap")
devtools::load_all()
# 以人类为例，测试代码
setwd("F:/台式机/project3-R包2/rpkg20210623/上传至GitHub/R包重新整理上传代码")
edge_bundling_GSEA(SeuratObj, link_threshold=0.98, p.adjust_thresh=0.05, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
edge_bundling_GSEA(SeuratObj, link_threshold=0.5, p.adjust_thresh=0.0001, link_width=0.9, method='cosine similarity', node.by='seurat_clusters', group.by="group")
